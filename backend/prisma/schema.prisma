// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums
enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum ContestStatus {
  PLANNED
  RUNNING
  ENDED
  ARCHIVED
}

enum ParticipantStatus {
  ACTIVE
  DISQUALIFIED
  WITHDRAWN
}

enum SubmissionStatus {
  PENDING
  UNDER_REVIEW
  ACCEPTED
  REJECTED
}

enum BackupStatus {
  SUCCESS
  FAILED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
}

// Enhanced User model
model User {
  id                    String      @id @default(uuid())
  username              String      @unique
  displayName           String?
  password              String
  roleId                String
  pcCode                String?
  ipAddress             String?
  lastActive            DateTime?
  scored                Float       @default(0)
  problemsSolvedCount   Int         @default(0)
  
  // Relationships
  role                  Role        @relation(fields: [roleId], references: [id])
  submissions           Submission[]
  submissionReviews     Submission[] @relation("SubmissionReviewer")
  reviewsSubmitted      Review[]     @relation("ReviewSubmittedBy")
  reviewsPerformed      Review[]     @relation("ReviewReviewedBy")
  contestUsers          ContestUser[]
  auditLogs             AuditLog[]
  createdProblems       QuestionProblem[]
  leaderboardEntries    Leaderboard[]
  attendance            Attendance[]
  backupRecords         BackupRecord[]
  systemControls        SystemControl[]
  seat                  Seat?
  
  // Legacy fields for backward compatibility
  scoreEvents           ScoreEvent[]
}

// Role and Permission system
model Role {
  id                    String            @id @default(uuid())
  name                  String            @unique
  description           String?
  
  users                 User[]
  rolePermissions       RolePermission[]
}

model Permission {
  id                    String            @id @default(uuid())
  code                  Int               @unique
  name                  String
  description           String?
  parentPermissionId    String?
  
  parentPermission      Permission?       @relation("PermissionHierarchy", fields: [parentPermissionId], references: [id])
  childPermissions      Permission[]      @relation("PermissionHierarchy")
  rolePermissions       RolePermission[]
  auditLogs             AuditLog[]
}

model RolePermission {
  id                    String      @id @default(uuid())
  roleId                String
  permissionId          String
  inherited             Boolean     @default(false)
  
  role                  Role        @relation(fields: [roleId], references: [id])
  permission            Permission  @relation(fields: [permissionId], references: [id])
  
  @@unique([roleId, permissionId])
}

// Contest system
model Contest {
  id                    String            @id @default(uuid())
  name                  String
  description           String?
  startTime             DateTime?
  endTime               DateTime?
  status                ContestStatus     @default(PLANNED)
  
  contestUsers          ContestUser[]
  contestProblems       ContestProblem[]
  submissions           Submission[]
  analytics             Analytics[]
  leaderboard           Leaderboard[]
  attendance            Attendance[]
  systemControls        SystemControl[]
}

model ContestUser {
  id                    String            @id @default(uuid())
  contestId             String
  userId                String
  joinedAt              DateTime          @default(now())
  status                ParticipantStatus @default(ACTIVE)
  
  contest               Contest           @relation(fields: [contestId], references: [id])
  user                  User              @relation(fields: [userId], references: [id])
  
  @@unique([contestId, userId])
}

// Enhanced Problem and Submission system
model QuestionProblem {
  id                    String            @id @default(uuid())
  questionText          String
  difficultyLevel       Difficulty
  tags                  String?
  createdById           String?
  createdAt             DateTime          @default(now())
  maxScore              Float
  isActive              Boolean           @default(true)
  
  createdBy             User?             @relation(fields: [createdById], references: [id])
  contestProblems       ContestProblem[]
  submissions           Submission[]
  reviews               Review[]
}

model ContestProblem {
  id                    String            @id @default(uuid())
  contestId             String
  problemId             String
  order                 Int?
  points                Float
  
  contest               Contest           @relation(fields: [contestId], references: [id])
  problem               QuestionProblem   @relation(fields: [problemId], references: [id])
  
  @@unique([contestId, problemId])
}

// Enhanced Submission and Review system
model Submission {
  id                    String            @id @default(uuid())
  problemId             String
  contestId             String
  submittedById         String
  timestamp             DateTime          @default(now())
  status                SubmissionStatus  @default(PENDING)
  reviewedById          String?
  score                 Float             @default(0)
  codeText              String
  
  problem               QuestionProblem   @relation(fields: [problemId], references: [id])
  contest               Contest           @relation(fields: [contestId], references: [id])
  submittedBy           User              @relation(fields: [submittedById], references: [id])
  reviewedBy            User?             @relation("SubmissionReviewer", fields: [reviewedById], references: [id])
  review                Review?
  
  // Legacy fields for backward compatibility
  language              String?
  attemptCount          Int?
  legacyCreatedAt       DateTime?
  legacyUpdatedAt       DateTime?
  scoreEvent            ScoreEvent?
}

model Review {
  id                    String      @id @default(uuid())
  submissionId          String      @unique
  problemId             String
  submittedById         String
  reviewedById          String
  timestamp             DateTime    @default(now())
  correct               Boolean
  scoreAwarded          Float
  remarks               String?
  
  submission            Submission  @relation(fields: [submissionId], references: [id])
  problem               QuestionProblem @relation(fields: [problemId], references: [id])
  submittedBy           User        @relation("ReviewSubmittedBy", fields: [submittedById], references: [id])
  reviewedBy            User        @relation("ReviewReviewedBy", fields: [reviewedById], references: [id])
}

// Analytics and Leaderboard
model Analytics {
  id                    String      @id @default(uuid())
  contestId             String
  totalSubmissions      Int
  correctSubmissions    Int
  activeParticipants    Int
  lastUpdated           DateTime    @default(now()) @updatedAt
  
  contest               Contest     @relation(fields: [contestId], references: [id])
}

model Leaderboard {
  id                    String      @id @default(uuid())
  contestId             String
  userId                String
  rank                  Int
  score                 Float
  problemsSolved        Int
  lastSubmissionTime    DateTime?
  
  contest               Contest     @relation(fields: [contestId], references: [id])
  user                  User        @relation(fields: [userId], references: [id])
  
  @@unique([contestId, userId])
}

// System management
model AuditLog {
  id                    String      @id @default(uuid())
  userId                String?
  action                String
  permissionId          String?
  timestamp             DateTime    @default(now())
  ipAddress             String?
  details               Json?
  
  user                  User?       @relation(fields: [userId], references: [id])
  permission            Permission? @relation(fields: [permissionId], references: [id])
  
  // Legacy fields for backward compatibility
  actor                 String?
  entity                String?
  ip                    String?
}

model BackupRecord {
  id                    String      @id @default(uuid())
  createdAt             DateTime    @default(now())
  createdById           String
  filePath              String
  status                BackupStatus
  
  createdBy             User        @relation(fields: [createdById], references: [id])
}

model Attendance {
  id                    String      @id @default(uuid())
  contestId             String
  userId                String
  checkinTime           DateTime    @default(now())
  checkoutTime          DateTime?
  status                AttendanceStatus @default(PRESENT)
  
  contest               Contest     @relation(fields: [contestId], references: [id])
  user                  User        @relation(fields: [userId], references: [id])
  
  @@unique([contestId, userId])
}

model SystemControl {
  id                    String      @id @default(uuid())
  contestId             String
  controlCode           Int
  value                 Json
  setById               String
  setAt                 DateTime    @default(now())
  
  contest               Contest     @relation(fields: [contestId], references: [id])
  setBy                 User        @relation(fields: [setById], references: [id])
}

// Legacy models for backward compatibility
model Problem {
  id                String       @id @default(uuid())
  title             String
  description       String
  difficulty        String
  points            Float
  test_cases        Json
  hidden_judge_notes String?
}

model ScoreEvent {
  id          String   @id @default(uuid())
  submissionId String   @unique
  points      Float
  acceptedAt  DateTime @default(now())
  submission  Submission @relation(fields: [submissionId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model Seat {
  id            String @id @default(uuid())
  pc_access_code String @unique
  ip_address    String
  userId        String @unique
  user          User   @relation(fields: [userId], references: [id])
}

model ContestState {
  id          String    @id @default(uuid())
  phase       String    @default("Setup") // Setup, Reading, Running, Locked, Results
  startTime   DateTime?
  endTime     DateTime?
  lastUpdated DateTime  @default(now()) @updatedAt
}